name: 'Nightly reusable workflow'

on:
  workflow_call:
    inputs:
      ref:
        description: Reference in order to fetch code
        type: string
        required: false
        default: "${{ github.event.workflow_run && github.event.workflow_run.referenced_workflows[0] && github.event.workflow_run.referenced_workflows[0].ref || github.ref }}"

env:
  COMPOSER_PREFER_STABLE: '1'
  TEST_OUTPUT_STYLE: pretty


permissions:
  contents: read
  checks: write # For the check run creation !

jobs:
  fetch-supported-versions:
    name: Fetch supported versions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write # For the check run creation !
    outputs:
      php-min: ${{ steps.fetch-php-versions.outputs.min }}
      php-max: ${{ steps.fetch-php-versions.outputs.max }}
      php-next: ${{ steps.fetch-php-versions.outputs.next }}
      symfony-min: ${{ steps.fetch-symfony-versions.outputs.min }}
      symfony-max: ${{ steps.fetch-symfony-versions.outputs.max }}
      symfony-next: ${{ steps.fetch-symfony-versions.outputs.next }}
    steps:
      - name: 'Check run ○'
        uses: yoanm/temp-reports-group-workspace/utils/attach-check-run-to-triggering-workflow@v0
        with:
          name: 'Fetch supported versions'
          fails-on-triggering-workflow-failure: true

      - name: Fetch PHP supported versions
        id: fetch-php-versions
        uses: yoanm/gha-supported-versions-parser@feature/init
        with:
          path: .github/workflows/supported-versions.json
          dependency: php
          ref: "${{ inputs.ref }}"

      - name: Fetch Symfony supported versions
        id: fetch-symfony-versions
        uses: yoanm/gha-supported-versions-parser@feature/init
        with:
          path: .github/workflows/supported-versions.json
          dependency: symfony
          ref: "${{ inputs.ref }}"

  tests:
    name: ${{ matrix.job-name }}
    needs: [ fetch-supported-versions ]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: read
      checks: write # For the check run creation !
    env:
      COMPOSER_IGNORE_PLATFORM_REQ: 'php+'
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: PHP - With highest supported Symfony versions
            php-version: ${{ needs.fetch-supported-versions.outputs.php-next }}
            symfony-version: ${{ needs.fetch-supported-versions.outputs.symfony-max }}
            # Fix - behat/gherkin => Avoid issue with behat <-> gherkin packages (See https://github.com/Behat/Gherkin/issues/317)
            pkg-extra-constraints: behat/gherkin:~4.12.0
          - job-name: PHP - With lowest supported Symfony versions
            php-version: ${{ needs.fetch-supported-versions.outputs.php-next }}
            symfony-version: ${{ needs.fetch-supported-versions.outputs.symfony-min }}
            # Fix - behat/gherkin => Avoid issue with behat <-> gherkin packages (See https://github.com/Behat/Gherkin/issues/317)
            pkg-extra-constraints: behat/gherkin:~4.12.0
          - job-name: Symfony - With highest supported PHP version
            php-version: ${{ needs.fetch-supported-versions.outputs.php-max }}
            symfony-version: ${{ needs.fetch-supported-versions.outputs.symfony-next }}
            # Fix - behat/gherkin => Avoid issue with behat <-> gherkin packages (See https://github.com/Behat/Gherkin/issues/317)
            # Fix - symfony/framework-bundle - Framework bundle <7.0 require php 8.1 minimum !
            pkg-extra-constraints: behat/gherkin:~4.12.0  ${{ ( needs.fetch-supported-versions.outputs.symfony-next == '7.0' && needs.fetch-supported-versions.outputs.php-max == '8.4' ) && 'symfony/framework-bundle:~7.0.0@dev' || '' }}
          - job-name: Symfony - With lowest supported PHP version
            # Fix - Sf 7.0 require php 8.1 minimum, most of deps require 8.2 !
            php-version: ${{ ( needs.fetch-supported-versions.outputs.symfony-next == '7.0' && needs.fetch-supported-versions.outputs.php-min == '8.0' ) && '8.2' || needs.fetch-supported-versions.outputs.php-min }}
            symfony-version: ${{ needs.fetch-supported-versions.outputs.symfony-next }}
            # Fix - behat/gherkin => Avoid issue with behat <-> gherkin packages (See https://github.com/Behat/Gherkin/issues/317)
            # Fix - symfony/framework-bundle - Framework bundle <7.0 require php 8.1 minimum !
            pkg-extra-constraints: behat/gherkin:~4.12.0 ${{ ( needs.fetch-supported-versions.outputs.symfony-next == '7.0' && needs.fetch-supported-versions.outputs.php-min == '8.0' ) && 'symfony/framework-bundle:~7.0.0@dev' || '' }}

    steps:
      - name: 'Check run ○'
        uses: yoanm/temp-reports-group-workspace/utils/attach-check-run-to-triggering-workflow@v0
        with:
          name: ${{ matrix.job-name }}
          fails-on-triggering-workflow-failure: true

      - name: Check out code
        uses: actions/checkout@v5
        with:
          ref: "${{ inputs.ref }}"

      - name: Setup PHP ${{ matrix.php-version }}
        id: setup-php
        uses: shivammathur/setup-php@v2
        env:
          update: true # whether to use latest available patch for the version or not
          fail-fast: true # step will fail if an extension or tool fails to set up
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Setup cache for PHP ${{ steps.setup-php.outputs.php-version }} & Symfony ${{ matrix.symfony-version }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.composer-cache.outputs.dir }}
          # Clear the cache if composer.json (as composer.lock is not available) has been updated
          key: tests-php${{ steps.setup-php.outputs.php-version }}-sf${{ matrix.symfony-version }}-${{ hashFiles('composer.json') }}

      - name: Build with PHP ${{ steps.setup-php.outputs.php-version }} & Symfony ${{ matrix.symfony-version }}
        run: |
          SF_CONSTRAINT="~${{ matrix.symfony-version }}.0@dev"
          composer config minimum-stability dev \
          && composer require -W \
            symfony/config:${SF_CONSTRAINT} \
            symfony/dependency-injection:${SF_CONSTRAINT} \
            symfony/event-dispatcher:${SF_CONSTRAINT} \
            symfony/http-foundation:${SF_CONSTRAINT} \
            symfony/http-kernel:${SF_CONSTRAINT} \
            ${{ matrix.pkg-extra-constraints }} \
          && make build

      - name: Test
        run: make test-unit && make test-functional
