name: 'CI reusable workflow'

on:
  workflow_call:
    inputs:
      # >>>> Dummy env-inputs
      # Goal here is just to have access to variable values
      # in order to build job matrix as `env` variable is not available there
      php-min-version:
        default: '8.0'
        description: Lowest PHP version to assess (e.g Lowest supported version including security support)
        required: false
        type: string
      php-max-version:
        default: '8.2'
        description: Highest PHP version to assess (e.g Highest supported version)
        required: false
        type: string
      php-next-version:
        default: '8.3'
        description: Next (currently not supported) PHP version to assess (e.g Current dev version)
        required: false
        type: string
      symfony-min-version:
        default: '4.4'
        description: Lowest Symfony version to assess (e.g Lowest supported version - usually LTS including security support)
        required: false
        type: string
      symfony-max-version:
        default: '6.0'
        description: Highest Symfony version to assess (e.g Highest supported version)
        required: false
        type: string
      symfony-next-version:
        default: '6.3'
        description: Next (currently not supported) Symfony version to assess (e.g Current dev version)
        required: false
        type: string
      # <<<< Dummy env-inputs

env:
  COMPOSER_PREFER_STABLE: '1'
  TEST_OUTPUT_STYLE: pretty

jobs:
  tests:
    name: ${{ matrix.job-name }}
    runs-on: ubuntu-latest
    env:
      COVERAGE_TYPE: none
      COVERAGE_OUTPUT_STYLE: clover
    strategy:
      fail-fast: true
      max-parallel: 4
      matrix:
        include:
          - job-name: Up to date versions # => Highest versions allowed by composer config
            php-version: '${{ inputs.php-max-version }}'
            symfony-version: '${{ inputs.symfony-max-version }}'
          - job-name: Up to date versions - Special case - Symfony 5.4
            php-version: '${{ inputs.php-max-version }}'
            symfony-version: '5.4'
          - job-name: Late migration - Symfony # => Lowest symfony version with highest php version allowed by composer config
            php-version: '${{ inputs.php-max-version }}'
            symfony-version: '${{ inputs.symfony-min-version }}'
          - job-name: Bare minimum # => Lowest versions allowed by composer config
            php-version: '${{ inputs.php-min-version }}'
            symfony-version: '${{ inputs.symfony-min-version }}'
          - job-name: Bare minimum - Special case - Symfony 5.4
            php-version: '${{ inputs.php-min-version }}'
            symfony-version: '5.4'
          - job-name: Late migration - Php # => Highest symfony version with lowest php version allowed by composer config
            php-version: '${{ inputs.php-min-version }}'
            symfony-version: '${{ inputs.symfony-max-version }}'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # Enable coverage only for specific version(s) !
      # Usually highest version(s), plus additional ones in case of code used only with specific versions
      - name: Enable coverage
        if: ${{ matrix.php-version == inputs.php-max-version }}
        run: |
          echo "COVERAGE_TYPE=xdebug" >> $GITHUB_ENV

      - name: Setup PHP ${{ matrix.php-version }}
        id: setup-php
        uses: shivammathur/setup-php@v2
        env:
          update: true # whether to use latest available patch for the version or not
          fail-fast: true # step will fail if an extension or tool fails to set up
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer
          coverage: ${{ env.COVERAGE_TYPE }}

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Setup cache for PHP ${{ steps.setup-php.outputs.php-version }} & Symfony ${{ matrix.symfony-version }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.composer-cache.outputs.dir }}
          # Clear the cache if composer.json (as composer.lock is not available) has been updated
          key: tests-php${{ steps.setup-php.outputs.php-version }}-sf${{ matrix.symfony-version }}-${{ hashFiles('composer.json') }}

      - name: Build with PHP ${{ steps.setup-php.outputs.php-version }} & Symfony ${{ matrix.symfony-version }}
        run: |
          SF_CONSTRAINT="~${{ matrix.symfony-version }}.0"
          composer require -W \
            symfony/http-foundation:${SF_CONSTRAINT} \
            symfony/http-kernel:${SF_CONSTRAINT} \
            symfony/config:${SF_CONSTRAINT} \
            symfony/dependency-injection:${SF_CONSTRAINT} \
            symfony/event-dispatcher:${SF_CONSTRAINT} \
            symfony/routing:${SF_CONSTRAINT} \
            ${{ matrix.pkg-extra-constraints }} \
          && make build

      - name: Tests
        run: make test-unit && make test-functional

      - name: Create "unit tests" reports group
        if: ${{ env.COVERAGE_TYPE == 'xdebug' }}
        uses: yoanm/temp-reports-group-workspace/create-group@v0
        with:
          name: unit-tests
          format: clover
          files: build/coverage-phpunit/unit.clover
          flags: |
            unit-tests
            php-${{ matrix.php-version }}
            sf-${{ matrix.symfony-version }}
          path: build/coverage-groups

      - name: Create "functional tests" reports group
        if: ${{ env.COVERAGE_TYPE == 'xdebug' }}
        uses: yoanm/temp-reports-group-workspace/create-group@v0
        with:
          name: functional-tests
          format: clover
          files: |
            build/coverage-phpunit/functional.clover
            build/coverage-behat/clover.xml
          flags: |
            functional-tests
            php-${{ matrix.php-version }}
            sf-${{ matrix.symfony-version }}
          path: build/coverage-groups

      - name: Upload coverage reports
        if: ${{ env.COVERAGE_TYPE == 'xdebug' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-groups-php${{ steps.setup-php.outputs.php-version }}-sf${{ matrix.symfony-version }}
          path: build/coverage-groups
          if-no-files-found: error

  static-checks:
    name: Static analysis
    runs-on: ubuntu-latest
    env:
      PHP_VERSION: ${{ inputs.php-max-version }}
      SYMFONY_VERSION: ${{ inputs.symfony-max-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP ${{ env.PHP_VERSION }}
        id: setup-php
        uses: shivammathur/setup-php@v2
        env:
          update: true # Always use latest available patch for the version
          fail-fast: true # step will fail if an extension or tool fails to set up
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Setup cache for PHP ${{ steps.setup-php.outputs.php-version }} & Symfony ${{ env.SYMFONY_VERSION }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.composer-cache.outputs.dir }}
          # Clear the cache if composer.json (as composer.lock is not available) has been updated
          key: tests-php${{ steps.setup-php.outputs.php-version }}-sf${{ env.SYMFONY_VERSION }}-${{ hashFiles('composer.json') }}

      - name: Build with PHP ${{ steps.setup-php.outputs.php-version }} & Symfony ${{ env.SYMFONY_VERSION }}
        run: |
          SF_CONSTRAINT="~${{ env.SYMFONY_VERSION }}.0"
          composer require -W \
            symfony/http-foundation:${SF_CONSTRAINT} \
            symfony/http-kernel:${SF_CONSTRAINT} \
            symfony/config:${SF_CONSTRAINT} \
            symfony/dependency-injection:${SF_CONSTRAINT} \
            symfony/event-dispatcher:${SF_CONSTRAINT} \
            symfony/routing:${SF_CONSTRAINT} \
          && make build

      - name: ComposerRequireChecker
        uses: docker://webfactory/composer-require-checker:4.5.0

      - name: Dependencies check
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/dependency-review-action@v4

  nightly-tests:
    name: ${{ matrix.job-name }}
    runs-on: ubuntu-latest
    env:
      COMPOSER_IGNORE_PLATFORM_REQ: 'php+'
    continue-on-error: true
    needs: [ tests ]
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - job-name: PHP Nightly - With highest supported symfony versions
            php-version: ${{ inputs.php-next-version }}
            symfony-version: ${{ inputs.symfony-max-version }}
          - job-name: PHP Nightly - With lowest supported symfony versions
            php-version: ${{ inputs.php-next-version }}
            symfony-version: ${{ inputs.symfony-min-version }}
          - job-name: Symfony Nightly - With highest supported php version
            php-version: ${{ inputs.php-max-version }}
            symfony-version: ${{ inputs.symfony-next-version }}
          - job-name: Symfony Nightly - With lowest supported php version
            php-version: ${{ inputs.php-min-version > 8.1 && inputs.php-min-version || '8.1' }} # Fix - Sf 6.3 (current next) require php 8.1 minimum !
            symfony-version: ${{ inputs.symfony-next-version }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        id: setup-php
        uses: shivammathur/setup-php@v2
        env:
          update: true # whether to use latest available patch for the version or not
          fail-fast: true # step will fail if an extension or tool fails to set up
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Setup cache for PHP ${{ steps.setup-php.outputs.php-version }} & Symfony ${{ matrix.symfony-version }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.composer-cache.outputs.dir }}
          # Clear the cache if composer.json (as composer.lock is not available) has been updated
          key: tests-php${{ steps.setup-php.outputs.php-version }}-sf${{ matrix.symfony-version }}-${{ hashFiles('composer.json') }}

      - name: Build with PHP ${{ steps.setup-php.outputs.php-version }} & Symfony ${{ matrix.symfony-version }}
        run: |
          SF_CONSTRAINT="~${{ matrix.symfony-version }}.0@dev"
          composer config minimum-stability dev \
          && composer require -W \
            symfony/http-foundation:${SF_CONSTRAINT} \
            symfony/http-kernel:${SF_CONSTRAINT} \
            symfony/config:${SF_CONSTRAINT} \
            symfony/dependency-injection:${SF_CONSTRAINT} \
            symfony/event-dispatcher:${SF_CONSTRAINT} \
            symfony/routing:${SF_CONSTRAINT} \
            ${{ matrix.pkg-extra-constraints }} \
          && make build

      - name: Test
        run: make test-unit && make test-functional
